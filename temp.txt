for(int i=0;i<g.size();i++){
        for(int j=0;j<g[0].size();j++){
            cerr<<residual[i][j]<<" ";
        }
        cerr<<"\n";
    }
    for(int i=0;i<adj.size();i++){
        for(int j=0;j<adj[0].size();j++){
            if(adj[i][j]>0)
             cerr<<i+1<<' '<<j+1<<endl;
        }
        // cerr<<"\n";
    }

    //while dealing with adjacent matrix deal with multiple same edge
     g[x][y]+=w; cin>>x>>y>>w;x--,y--;

queue<int>q;
    q.push(0);
    while(!q.empty()){
        int rem=q.front();q.pop();
        for(auto x:adj[rem]){
            level[x]=level[rem]+1;
            
        }
    }
    
     template<typename... T>
void see(T&... args) { ((cin >> args), ...);}
template<typename... T>
void put(T&&... args) { ((cout << args << " "), ...);}
template<typename... T>
void putl(T&&... args) { ((cout << args << " "), ...); cout<<'\n';}
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {cerr << *it << "=" << a << ", "; err(++it, args...);}
#define int long long
#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int,int>
#define tiii tuple<int,int,int,int>
#define vi vector<int>
#define vii vector<pii>
#define vc vector
#define L cout<<'\n';
#define E cerr<<'\n';
#define all(x) x.begin(),x.end()
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define rev(i,a,b) for (int i=a; i>b; --i)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setpr(x) cout<<setprecision(x)<<fixed
#define sz size()
#define seea(a,x,y) for(int i=x;i<y;i++){cin>>a[i];}
#define seev(v,n) for(int i=0;i<n;i++){int x; cin>>x; v.push_back(x);}
#define sees(s,n) for(int i=0;i<n;i++){int x; cin>>x; s.insert(x);}

struct scc{
    int n,cnt=0;
    vector<vector<ll>>adj,radj;
    vector<int>who,order;
    vector<bool>vis;
    void init(int _N){
        n=_N;
        adj.resize(n+1);radj.resize(n+1);who.resize(n+1,-1),vis.resize(n+1,false);
    }
    void add(int x,int y){
        adj[x].push_back(y);radj[y].push_back(x);
    }
    void dfs(int u){
        vis[u]=1;
        for(int x:adj[u]){
            if(!vis[x]) dfs(x);
        }
        order.push_back(u);
    }
    void dfs2(int u,int a){
        who[u]=a;
        for(auto x:radj[u]){
            if(who[x]==-1)
                    dfs2(x,a);
        }
    }
    void gen(){
        for(int i=0;i<n;i++) if(!vis[i]) dfs(i);
        for(int i=order.size()-1;i>=0;i--){
            if(who[order[i]]==-1)
              dfs2(order[i],++cnt);
        }
        
    }
};